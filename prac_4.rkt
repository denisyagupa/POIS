#lang racket

(display "Вариант 4\nОписать функцию, которая находила бы сумму всех числовыхэлементов списка с учетом наличия подсписков. Пример: для списка ‘(1
((2 3) 4) 5 6) результатом будет 21.")

(define (recur lst)
  (if (list? lst)
      (if ( < 0 (length lst))
          (+ (recur (car lst)) (recur (cdr lst)))
          0
      )
      lst)
 )
(recur '(1((2 3) 4) 5 6) )

(display  "\nВариант 6\n. Описать функцию, которая на основе списка чисел формирует список-результат следующим образом: первый элемент есть произведение
элементов списка, второй – произведение элементов хвоста, третий –произведение элементов хвоста и так далее. Пример: для списка
‘(1 2 3 4 5 6) результатом будет : ‘(720 720 360 120 30 6).
" )

(display "Введите список в формате (1 2 3 4 5 6)")
(define spisok1 (read))
(define (mlist spisok1)
  (cond ((null? spisok1) '())
        (true (cons (apply * spisok1) (mlist (cdr spisok1))))))
(display "Ответ: ")(mlist spisok1)

(display "\nВариант 16\nОписать функцию, аргументами которой являются два списка, а
результатом список, содержащий элементы первого списка, не
принадлежащие второму списку.")

(define (notInclude lst1 lst2)
      (if ( null? lst1)
      lst1
      (append (if(member (car lst1) lst2) '() (list(car lst1))) (notInclude (cdr lst1) lst2))))

(display "\nОтвет: ")(notInclude '(1 2 3 4 5 6 7 8) '(3 5 7))